@page "/counter"
@inject IVoteService VoteService
@inject IUserService UserService

<AuthorizeView>
    <Authorized>
        <h1>Counter</h1>
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>
                You are connected as
                <b>@UserService.CurrentUser?.Username</b>
                Room Code
                <i>@UserService.CurrentUser?.RoomCode</i>
                <i>@(UserService.CurrentUser?.IsAdmin == true ? "[Admin]" :"")</i>
            </span>
        </div>

        @foreach (var action in Actions)
            {
                <Vote Message="@action.Description" OnChange="@(v => Vote(action.ActionId,v))"
                    Value="@VoteService.GetMyVote(action.ActionId)" Total="@VoteService.CountVotes(action.ActionId)"></Vote>
            }

                @if (UserService.CurrentUser?.IsAdmin == true)
            {
                <textarea class="input-lg" placeholder="enter your comment" @bind="_newMessage" @bind:event="oninput"
                    @onkeyup="ProcessKey"></textarea>
                <button class="btn btn-default" @onclick="@(() => SendAsync())">Send</button>
            }
            </Authorized>
            <NotAuthorized>
                <Login></Login>
            </NotAuthorized>
        </AuthorizeView>

        @code {
    private string _newMessage = "";

    private void Vote(int actionId, int value)
    {
        VoteService.CastVote(actionId, value);
    }

    private IEnumerable<Models.Action> Actions => VoteService.Actions
        .OrderByDescending(v => VoteService.CountVotes(v.ActionId));

    protected override void OnInitialized()
    {
        VoteService.OnUpdate += (o, e) =>
        {
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task SendAsync()
    {
        var buffer = _newMessage;
        _newMessage = null;
        await Task.Run(() =>
        {
            VoteService.CreateAction(buffer);
        });
    }

    public async Task ProcessKey(KeyboardEventArgs e)
    {
        if (!e.ShiftKey && e.Key == "Enter")
        {
            await SendAsync();
        }
    }
}
