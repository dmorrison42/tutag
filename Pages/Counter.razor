@page "/counter"
@using System.Collections.Generic
@using Confluent.Kafka
@implements IDisposable
@inject IUserService UserService

<AuthorizeView>
    <Authorized>
        <h1>Counter</h1>
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>
                You are connected as
                <b>@UserService.CurrentUser?.Username</b>
                Room Code
                <i>@UserService.CurrentUser?.RoomCode</i>
                <i>@(UserService.CurrentUser?.IsAdmin == true ? "[Admin]" :"")</i>
            </span>
            <p>Vote Total: @VoteTotal</p>
        </div>

        @foreach(var action in Actions) {
            <Vote Message="@action.Message.Value.Description" OnChange="@(v => Vote(action, v))"></Vote>
        }

        @if (UserService.CurrentUser?.IsAdmin == true) {
            <textarea class="input-lg" placeholder="enter your comment" @bind="_newMessage"  @bind:event="oninput" @onkeyup="ProcessKey"></textarea>
            <button class="btn btn-default" @onclick="@(() => SendAsync())">Send</button>
        }
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>

@code {
    private KafkaConnection<string, Models.VoteEvent> _kafkaVoteEvents;
    private KafkaConnection<string, Models.Action> _kafkaActions;
    private Dictionary<string, int> _votes = new Dictionary<string, int>();
    private Dictionary<int, List<ConsumeResult<string, Models.Action>>> _actions = 
        new Dictionary<int, List<ConsumeResult<string, Models.Action>>>();
    private string _newMessage = "";

    private int VoteTotal => _votes.Values.ToList().Sum();
    private int Turn => 0;
    private ConsumeResult<string, Models.Action>[] Actions => _actions.ContainsKey(Turn) 
        ? _actions[Turn].ToArray() 
        : new ConsumeResult<string, Models.Action>[0];

    private void Vote(ConsumeResult<string, Models.Action> action, int value)
    {
        _kafkaVoteEvents.Produce(UserService.CurrentUser?.RoomCode, new Models.VoteEvent(UserService.CurrentUser?.Username, value));
    }

    protected override void OnInitialized()
    {
        if (UserService.CurrentUser == null)
        {
            return;
        }

        _kafkaActions = new KafkaConnection<string, Models.Action>("actions",
            UserService.CurrentUser?.Username, async (result) =>
            {
                try
                {
                    if (result.Message.Key == UserService.CurrentUser?.RoomCode)
                    {
                        // Store actions by turn
                        var turn = result.Message.Value.Turn;
                        if (!_actions.ContainsKey(turn)) {
                            _actions[turn] = new List<ConsumeResult<string, Models.Action>>();
                        }
                        _actions[turn].Add(result);
                        await InvokeAsync(StateHasChanged);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            });

        _kafkaVoteEvents = new KafkaConnection<string, Models.VoteEvent>("voting", 
            UserService.CurrentUser?.Username, async (result) =>
            {
                try
                {
                    if (result.Message.Key == UserService.CurrentUser?.RoomCode)
                    {
                        _votes[result.Message.Value.Username] = result.Message.Value.Vote;
                        await InvokeAsync(StateHasChanged);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            });
    }

    private async Task SendAsync()
    {
        var buffer = _newMessage;
        _newMessage = null;
        await _kafkaActions.ProduceAsync(
            UserService.CurrentUser?.RoomCode,
            new Models.Action(Turn, buffer));
    }

    public async Task ProcessKey(KeyboardEventArgs e) {
        if (!e.ShiftKey && e.Key == "Enter")
        {
            await SendAsync();
        }
    }

    public void Dispose()
    {
        _kafkaVoteEvents?.Dispose();
    }
}
