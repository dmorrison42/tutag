@page "/counter"
@using System.Collections.Generic
@implements IDisposable
@inject IUserService UserService

<AuthorizeView>
    <Authorized>
        <h1>Counter</h1>
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>
                You are connected as
                <b>@UserService.CurrentUser?.Username</b>
                Room Code
                <i>@UserService.CurrentUser?.RoomCode</i>
                <i>@(UserService.CurrentUser?.IsAdmin == true ? "[Admin]" :"")</i>
            </span>
            <p>Vote Total: @VoteTotal</p>
        </div>

        <button class="btn btn-primary" @onclick="() => Vote(-1)">-1</button>
        <button class="btn btn-primary" @onclick="() => Vote(0)">0</button>
        <button class="btn btn-primary" @onclick="() => Vote(1)">+1</button>
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>

@code {
    class VoteEvent
    {
        public VoteEvent(string username, int vote)
        {
            Username = username;
            Vote = vote;
        }

        public string Username { set; get; }
        public int Vote { set; get; }
    }

    private KafkaConnection<string, VoteEvent> _kafka;
    private Dictionary<string, int> _votes = new Dictionary<string, int>();

    private int VoteTotal => _votes.Values.ToList().Sum();

    private void Vote(int value)
    {
        _kafka.Produce(UserService.CurrentUser?.RoomCode, new VoteEvent(UserService.CurrentUser?.Username, value));
    }

    protected override void OnInitialized()
    {
        if (UserService.CurrentUser == null)
        {
            return;
        }

        _kafka = new KafkaConnection<string, VoteEvent>("voting", UserService.CurrentUser.Username, async (result) =>
        {
            try
            {
                if (result.Message.Key == UserService.CurrentUser?.RoomCode)
                {
                    _votes[result.Message.Value.Username] = result.Message.Value.Vote;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        });
    }

    public void Dispose()
    {
        _kafka?.Dispose();
    }
}
