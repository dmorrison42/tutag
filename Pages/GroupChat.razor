@page "/groupchat"
@using Confluent.Kafka
@using System.Threading
@using System.ComponentModel
@using Newtonsoft.Json.Linq

@implements IDisposable

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <h1>Blazor SignalR Chat Sample</h1>
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>You are connected as <b>@_username</b></span>
        </div>
        <div id="scrollbox">
            @foreach (var item in _messages)
            {
                @if (item.IsNotice)
                {
                    <div class="alert alert-info">@item.Body</div>
                }
                else
                {
                    <div class="@item.CSS(_username)">
                        <div class="user">@item.Username</div>
                        <div class="msg">@item.Body</div>
                    </div>
                }
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"  @bind:event="oninput" @onkeyup="ProcessKey"></textarea>
            <button class="btn btn-default" @onclick="@(() => SendAsync())">Send</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>

@code {
    private static string _bootstrapServers = "localhost:9092";
    private readonly string _topic = "group-chat";
    private CancellationTokenSource _cancel = new CancellationTokenSource();
    private Task _consumerTask = null;
    private IProducer<string, string> _producer = null;

    // name of the user who will be chatting
    private string _username;
    private string _roomCode;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<ChatMessage> _messages = new List<ChatMessage>();

    private async Task SendAsync()
    {
        await _producer.ProduceAsync(_topic, new Message<string, string>
        {
            Key = _roomCode,
            Value = JObject.FromObject(new ChatMessage(_username, _newMessage)).ToString(),
        });
        _newMessage = null;
    }

    public async Task ProcessKey(KeyboardEventArgs e) {
        if (!e.ShiftKey && e.Key == "Enter")
        {
            await SendAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User as Tutag.Entities.User;
        _username = user?.Username;
        _roomCode = user?.RoomCode;
        if (user == null) {
            return;
        }

        var producerConfig = new ProducerConfig
        {
            BootstrapServers = _bootstrapServers,
            ClientId = _username,
        };

        _producer = new ProducerBuilder<string, string>(producerConfig).Build();

        _consumerTask = Task.Run(async () =>
        {
            var config = new ConsumerConfig
            {
                BootstrapServers = _bootstrapServers,
                GroupId = System.Guid.NewGuid().ToString(),
                AutoOffsetReset = AutoOffsetReset.Earliest,
                EnableAutoCommit = false,
            };

            using (var consumer = new ConsumerBuilder<string, string>(config).Build())
            {
                consumer.Subscribe(_topic);

                while (!_cancel.Token.IsCancellationRequested)
                {
                    try
                    {
                        var consumeResult = consumer.Consume(_cancel.Token);
                        var msg = consumeResult.Message;
                        if (msg.Key == _roomCode) {
                            _messages.Add(JObject.Parse(msg.Value)?.ToObject<ChatMessage>());
                        }
                        await InvokeAsync(StateHasChanged);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }
                }

                consumer.Close();
            }
        });

    }

    private class ChatMessage
    {
        public ChatMessage(string username, string body, bool isNotice = false)
        {
            Username = username;
            Body = body;
            IsNotice = isNotice;
        }

        public string Username { get; set; }
        public string Body { get; set; }

        [DefaultValue(false)]
        public bool IsNotice { get; set; }

        public string CSS(string myUsername) => Username == myUsername ? "sent" : "received";
    }

    public void Dispose()
    {
        _cancel.Cancel();
        _producer?.Dispose();
    }
}