@page "/groupchat"
@using Confluent.Kafka
@using System.Threading
@using System.ComponentModel

@implements IDisposable

@inject NavigationManager navigationManager
@inject IUserService UserService

<AuthorizeView>
    <Authorized>
        <h1>Blazor SignalR Chat Sample</h1>
        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>
                You are connected as 
                <b>@UserService.CurrentUser?.Username</b>
                Room Code
                <i>@UserService.CurrentUser?.RoomCode</i>
                @if (UserService.CurrentUser?.IsAdmin == true) {
                    <i>[Admin]</i>
                }
            </span>
        </div>
        <div id="scrollbox">
            @foreach (var item in _messages)
            {
                @if (item.IsNotice)
                {
                    <div class="alert alert-info">@item.Body</div>
                }
                else
                {
                    <div class="@item.CSS(UserService.CurrentUser?.Username)">
                        <div class="user">@item.Username</div>
                        <div class="msg">@item.Body</div>
                    </div>
                }
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"  @bind:event="oninput" @onkeyup="ProcessKey"></textarea>
            <button class="btn btn-default" @onclick="@(() => SendAsync())">Send</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>

@code {
    private KafkaConnection<string, string> _kafka;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<ChatMessage> _messages = new List<ChatMessage>();

    private async Task SendAsync()
    {
        var buffer = _newMessage;
        _newMessage = null;
        await _kafka.ProduceAsync(
            UserService.CurrentUser?.RoomCode,
            JObject.FromObject(new ChatMessage(UserService.CurrentUser?.Username, buffer)).ToString());
    }

    public async Task ProcessKey(KeyboardEventArgs e) {
        if (!e.ShiftKey && e.Key == "Enter")
        {
            await SendAsync();
        }
    }

    protected override void OnInitialized()
    {
        if (UserService.CurrentUser == null) {
            return;
        }
        _kafka = new KafkaConnection<string, string>("group-chat", UserService.CurrentUser.Username, async (result) => {
            try
            {
                if (result.Message.Key == UserService.CurrentUser?.RoomCode) {
                    _messages.Add(JObject.Parse(result.Message.Value)?.ToObject<ChatMessage>());
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        });
    }

    private class ChatMessage
    {
        public ChatMessage(string username, string body, bool isNotice = false)
        {
            Username = username;
            Body = body;
            IsNotice = isNotice;
        }

        public string Username { get; set; }
        public string Body { get; set; }

        [DefaultValue(false)]
        public bool IsNotice { get; set; }

        public string CSS(string myUsername) => Username == myUsername ? "sent" : "received";
    }

    public void Dispose()
    {
        _kafka?.Dispose();
    }
}
